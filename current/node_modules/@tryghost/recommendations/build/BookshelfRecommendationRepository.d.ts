/// <reference types="node" />
import { Recommendation } from './Recommendation';
import { RecommendationRepository } from './RecommendationRepository';
import { BookshelfRepository, ModelClass, ModelInstance } from '@tryghost/bookshelf-repository';
type Sentry = {
    captureException(err: unknown): void;
};
type RecommendationFindOneData<T> = {
    id?: T;
    url?: string;
};
type RecommendationModelClass<T> = ModelClass<T> & {
    findOne: (data: RecommendationFindOneData<T>, options?: {
        require?: boolean;
    }) => Promise<ModelInstance<T> | null>;
};
export declare class BookshelfRecommendationRepository extends BookshelfRepository<string, Recommendation> implements RecommendationRepository {
    sentry?: Sentry;
    constructor(Model: RecommendationModelClass<string>, deps?: {
        sentry?: Sentry;
    });
    toPrimitive(entity: Recommendation): object;
    modelToEntity(model: ModelInstance<string>): Recommendation | null;
    getFieldToColumnMap(): Record<keyof Recommendation, string>;
    getByUrl(url: URL): Promise<Recommendation | null>;
}
export {};
