"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationService = void 0;
const Recommendation_1 = require("./Recommendation");
const errors_1 = __importDefault(require("@tryghost/errors"));
const tpl_1 = __importDefault(require("@tryghost/tpl"));
const ClickEvent_1 = require("./ClickEvent");
const SubscribeEvent_1 = require("./SubscribeEvent");
const EntityWithIncludes_1 = require("./EntityWithIncludes");
const messages = {
    notFound: 'Recommendation with id {id} not found'
};
class RecommendationService {
    repository;
    clickEventRepository;
    subscribeEventRepository;
    wellknownService;
    mentionSendingService;
    recommendationEnablerService;
    constructor(deps) {
        this.repository = deps.repository;
        this.wellknownService = deps.wellknownService;
        this.mentionSendingService = deps.mentionSendingService;
        this.recommendationEnablerService = deps.recommendationEnablerService;
        this.clickEventRepository = deps.clickEventRepository;
        this.subscribeEventRepository = deps.subscribeEventRepository;
    }
    async init() {
        const recommendations = (await this.listRecommendations()).map(r => r.entity);
        await this.updateWellknown(recommendations);
    }
    async updateWellknown(recommendations) {
        await this.wellknownService.set(recommendations);
    }
    async updateRecommendationsEnabledSetting(recommendations) {
        const expectedSetting = (recommendations.length > 0).toString();
        const currentSetting = this.recommendationEnablerService.getSetting();
        if (currentSetting && currentSetting === expectedSetting) {
            return;
        }
        await this.recommendationEnablerService.setSetting(expectedSetting);
    }
    sendMentionToRecommendation(recommendation) {
        this.mentionSendingService.sendAll({
            url: this.wellknownService.getURL(),
            links: [
                recommendation.url
            ]
        }).catch(console.error); // eslint-disable-line no-console
    }
    async addRecommendation(addRecommendation) {
        const recommendation = Recommendation_1.Recommendation.create(addRecommendation);
        // If a recommendation with this URL already exists, throw an error
        const existing = await this.repository.getByUrl(recommendation.url);
        if (existing) {
            throw new errors_1.default.ValidationError({
                message: 'A recommendation with this URL already exists.'
            });
        }
        await this.repository.save(recommendation);
        const recommendations = (await this.listRecommendations()).map(r => r.entity);
        await this.updateWellknown(recommendations);
        await this.updateRecommendationsEnabledSetting(recommendations);
        // Only send an update for the mentioned URL
        this.sendMentionToRecommendation(recommendation);
        return EntityWithIncludes_1.EntityWithIncludes.create(recommendation);
    }
    async editRecommendation(id, recommendationEdit) {
        // Check if it exists
        const existing = await this.repository.getById(id);
        if (!existing) {
            throw new errors_1.default.NotFoundError({
                message: (0, tpl_1.default)(messages.notFound, { id })
            });
        }
        existing.edit(recommendationEdit);
        await this.repository.save(existing);
        const recommendations = (await this.listRecommendations()).map(r => r.entity);
        await this.updateWellknown(recommendations);
        this.sendMentionToRecommendation(existing);
        return EntityWithIncludes_1.EntityWithIncludes.create(existing);
    }
    async deleteRecommendation(id) {
        const existing = await this.repository.getById(id);
        if (!existing) {
            throw new errors_1.default.NotFoundError({
                message: (0, tpl_1.default)(messages.notFound, { id })
            });
        }
        existing.delete();
        await this.repository.save(existing);
        const recommendations = (await this.listRecommendations()).map(r => r.entity);
        await this.updateWellknown(recommendations);
        await this.updateRecommendationsEnabledSetting(recommendations);
        // Send a mention (because it was deleted, according to the webmentions spec)
        this.sendMentionToRecommendation(existing);
    }
    async listRecommendations({ page, limit, filter, order, include } = { page: 1, limit: 'all' }) {
        let list;
        if (limit === 'all') {
            list = await this.repository.getAll({ filter, order });
        }
        else {
            list = await this.repository.getPage({ page, limit, filter, order });
        }
        // Transform to includes
        const entities = list.map(entity => EntityWithIncludes_1.EntityWithIncludes.create(entity));
        await this.loadRelations(entities, include);
        return entities;
    }
    async loadRelations(list, include) {
        if (!include || !include.length) {
            return;
        }
        if (list.length === 0) {
            // Avoid doing queries with broken filters
            return;
        }
        for (const relation of include) {
            switch (relation) {
                case 'count.clicks':
                    const clickCounts = await this.clickEventRepository.getGroupedCount({ groupBy: 'recommendationId', filter: `recommendationId:[${list.map(entity => entity.entity.id).join(',')}]` });
                    // Set all to zero by default
                    for (const entity of list) {
                        entity.setInclude(relation, 0);
                    }
                    for (const r of clickCounts) {
                        const entity = list.find(e => e.entity.id === r.recommendationId);
                        if (entity) {
                            entity.setInclude(relation, r.count);
                        }
                    }
                    break;
                case 'count.subscribers':
                    const subscribersCounts = await this.subscribeEventRepository.getGroupedCount({ groupBy: 'recommendationId', filter: `recommendationId:[${list.map(entity => entity.entity.id).join(',')}]` });
                    // Set all to zero by default
                    for (const entity of list) {
                        entity.setInclude(relation, 0);
                    }
                    for (const r of subscribersCounts) {
                        const entity = list.find(e => e.entity.id === r.recommendationId);
                        if (entity) {
                            entity.setInclude(relation, r.count);
                        }
                    }
                    break;
                default:
                    // Should create a Type compile error in case we didn't catch all relations
                    const r = relation;
                    console.error(`Unknown relation ${r}`); // eslint-disable-line no-console
            }
        }
    }
    async countRecommendations({ filter }) {
        return await this.repository.getCount({ filter });
    }
    async trackClicked({ id, memberId }) {
        const clickEvent = ClickEvent_1.ClickEvent.create({ recommendationId: id, memberId });
        await this.clickEventRepository.save(clickEvent);
    }
    async trackSubscribed({ id, memberId }) {
        const subscribeEvent = SubscribeEvent_1.SubscribeEvent.create({ recommendationId: id, memberId });
        await this.subscribeEventRepository.save(subscribeEvent);
    }
}
exports.RecommendationService = RecommendationService;
//# sourceMappingURL=RecommendationService.js.map