"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BookshelfRecommendationRepository = void 0;
const Recommendation_1 = require("./Recommendation");
const bookshelf_repository_1 = require("@tryghost/bookshelf-repository");
const logging_1 = __importDefault(require("@tryghost/logging"));
class BookshelfRecommendationRepository extends bookshelf_repository_1.BookshelfRepository {
    sentry;
    constructor(Model, deps = {}) {
        super(Model);
        this.sentry = deps.sentry;
    }
    toPrimitive(entity) {
        return {
            id: entity.id,
            title: entity.title,
            reason: entity.reason,
            excerpt: entity.excerpt,
            featured_image: entity.featuredImage?.toString(),
            favicon: entity.favicon?.toString(),
            url: entity.url.toString(),
            one_click_subscribe: entity.oneClickSubscribe,
            created_at: entity.createdAt,
            updated_at: entity.updatedAt
        };
    }
    modelToEntity(model) {
        try {
            return Recommendation_1.Recommendation.create({
                id: model.id,
                title: model.get('title'),
                reason: model.get('reason'),
                excerpt: model.get('excerpt'),
                featuredImage: model.get('featured_image') !== null ? new URL(model.get('featured_image')) : null,
                favicon: model.get('favicon') !== null ? new URL(model.get('favicon')) : null,
                url: new URL(model.get('url')),
                oneClickSubscribe: model.get('one_click_subscribe'),
                createdAt: model.get('created_at'),
                updatedAt: model.get('updated_at')
            });
        }
        catch (err) {
            logging_1.default.error(err);
            this.sentry?.captureException(err);
            return null;
        }
    }
    getFieldToColumnMap() {
        return {
            id: 'id',
            title: 'title',
            reason: 'reason',
            excerpt: 'excerpt',
            featuredImage: 'featured_image',
            favicon: 'favicon',
            url: 'url',
            oneClickSubscribe: 'one_click_subscribe',
            createdAt: 'created_at',
            updatedAt: 'updated_at'
        };
    }
    async getByUrl(url) {
        const model = await this.Model.findOne({ url: url.toString() }, { require: false });
        return model ? this.modelToEntity(model) : null;
    }
}
exports.BookshelfRecommendationRepository = BookshelfRecommendationRepository;
//# sourceMappingURL=BookshelfRecommendationRepository.js.map