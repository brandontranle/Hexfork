/// <reference types="node" />
import { BookshelfRepository, OrderOption } from '@tryghost/bookshelf-repository';
import { AddRecommendation, Recommendation } from './Recommendation';
import { RecommendationRepository } from './RecommendationRepository';
import { WellknownService } from './WellknownService';
import { ClickEvent } from './ClickEvent';
import { SubscribeEvent } from './SubscribeEvent';
import { EntityWithIncludes } from './EntityWithIncludes';
export type RecommendationInclude = 'count.clicks' | 'count.subscribers';
type MentionSendingService = {
    sendAll(options: {
        url: URL;
        links: URL[];
    }): Promise<void>;
};
type RecommendationEnablerService = {
    getSetting(): string;
    setSetting(value: string): Promise<void>;
};
export declare class RecommendationService {
    repository: RecommendationRepository;
    clickEventRepository: BookshelfRepository<string, ClickEvent>;
    subscribeEventRepository: BookshelfRepository<string, SubscribeEvent>;
    wellknownService: WellknownService;
    mentionSendingService: MentionSendingService;
    recommendationEnablerService: RecommendationEnablerService;
    constructor(deps: {
        repository: RecommendationRepository;
        clickEventRepository: BookshelfRepository<string, ClickEvent>;
        subscribeEventRepository: BookshelfRepository<string, SubscribeEvent>;
        wellknownService: WellknownService;
        mentionSendingService: MentionSendingService;
        recommendationEnablerService: RecommendationEnablerService;
    });
    init(): Promise<void>;
    updateWellknown(recommendations: Recommendation[]): Promise<void>;
    updateRecommendationsEnabledSetting(recommendations: Recommendation[]): Promise<void>;
    private sendMentionToRecommendation;
    addRecommendation(addRecommendation: AddRecommendation): Promise<EntityWithIncludes<Recommendation, RecommendationInclude>>;
    editRecommendation(id: string, recommendationEdit: Partial<Recommendation>): Promise<EntityWithIncludes<Recommendation, RecommendationInclude>>;
    deleteRecommendation(id: string): Promise<void>;
    listRecommendations({ page, limit, filter, order, include }?: {
        page: number;
        limit: number | 'all';
        filter?: string;
        order?: OrderOption<Recommendation>;
        include?: RecommendationInclude[];
    }): Promise<EntityWithIncludes<Recommendation, RecommendationInclude>[]>;
    loadRelations(list: EntityWithIncludes<Recommendation, RecommendationInclude>[], include?: RecommendationInclude[]): Promise<void>;
    countRecommendations({ filter }: {
        filter?: string;
    }): Promise<number>;
    trackClicked({ id, memberId }: {
        id: string;
        memberId?: string;
    }): Promise<void>;
    trackSubscribed({ id, memberId }: {
        id: string;
        memberId: string;
    }): Promise<void>;
}
export {};
